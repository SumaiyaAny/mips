/*
 * PC.cpp
 *
 * Created: 8/25/2022 7:27:23 PM
 * Author : Sumaiya Sultana
 */ 

#define F_CPU 1000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int8_t current_pc;
int8_t updated_pc;
int8_t jump_address;
int8_t branch_offset;
uint8_t mux_control;
uint8_t C;

#define JUMP_SIGNAL_	0x01	//0th bit of PINC
#define ALU_ZERO_		0x02	//1st
#define BNEQ_SIGNAL_	0x04	//2nd
#define BEQ_SIGNAL_		0x08	//3rd

bool branch = false;
/*
										-U-
jump address 0				|	1				40	|	PC out0
jump address 1				|	2				39	|	PC out1
jump address 2				|	3				38	|	PC out2
jump address 3				|	4				37	|	PC out3			
jump address 4				|	5				36	|	PC out4			
jump address 5				|	6	B		A	35	|	PC out5			
jump address 6				|	7				34	|	PC out6			
jump address 7				|	8				33	|	PC out7			
		!reset				|	9				32	|		AREF		
		VCC					|	10				31	|		GND		
		GND					|	11				30	|		AVCC		
							|	12			C7	29	|		branch offset 3
							|	13				28	|		branch offset 2
							|	14	D0			27	|		branch offset 1
							|	15	D1		c4	26	|		branch offset 0
		clk_intrpt			|	16	D2		c3	25	|		beq control signal
							|	17			c2	24	|		bneq control signal
							|	18			c1	23	|		ALU 0 output
							|	19			C0	22	|		jump control signal
							|	20			D7	21	|			
*/
ISR(INT0_vect)
{
	current_pc = updated_pc;
	PORTA = current_pc;
	_delay_ms(50);
}
int main(void)
{
    // Some pins of PORTC can not be used for I/O directly.
    // turn of JTAG to use them
    // or write a 1 to the JTD bit twice consecutively to turn it off
    MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
	
	DDRA = 0xFF; //8 bit current pc output
	DDRB = 0x00; //8 bit jump address input
	DDRC = 0x00; //C[4-7] = 4 bit branch offset, C[0] = jump control signal, C[1] = ALU zero output , C[2] = bneq control signal , C[3] = beq control signal 
	DDRD = 0x00; //D2 e clk intrpt
	
	GICR = 1<<INT0;		/* Enable INT0*/
	MCUCR = 1<<ISC01;   /* Trigger INT0 on falling edge */
	MCUCR &= (~(1<<ISC00));
	sei();
	current_pc = 0x00;
    while (1) 
    {
		jump_address = PINB;
		C = PINC;
		branch_offset = C & 0xF0; //4bit from MSB is branch offset & 4 bit from lSB is control
		mux_control = C & 0x0F; //4 bit from lSB is control
		
		//pc+1
		updated_pc = current_pc + 1;
		
		//taking branch offset from MSB to LSB && sign extending it
		if(branch_offset & 0x80) branch_offset = branch_offset >>4 | (0b11110000); //-ve sign extension
		else branch_offset = branch_offset >>4;
		
		//if((beq && zero)||(bneq&& !zero)) then add branch_offset to pc+1;
		/*if(((mux_control & BEQ_SIGNAL_ ) && (mux_control & ALU_ZERO_))||((mux_control & BNEQ_SIGNAL_)&&(mux_control & !ALU_ZERO_))) {
			updated_pc += branch_offset;
		}*/
		
		uint8_t res = 0x00;
		res|=((mux_control>>3) & (mux_control>>1));
		res |= ((mux_control>>2) & (~(mux_control>>1)));
		res &= 0x01;
		if(res == 0x01){
			updated_pc += branch_offset;
		}
		
		//if(jump_signal) then updated_pc = branch_address
		if(mux_control & JUMP_SIGNAL_) updated_pc = jump_address;
		
		//writing updated pc to port D
		PORTA = current_pc;
		
		//delay
		_delay_ms(50);
    }
}
